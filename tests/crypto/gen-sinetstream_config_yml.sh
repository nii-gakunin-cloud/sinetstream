#!/bin/sh

reset() {
    algorithm="AES"
    key_length="256"
    mode="GCM"
    padding=""
    kd_algorithm=""
    kd_salt_bytes=""
    kd_iteration=""
    kd_prf=""
    password="sercret-000"
    data_encryption=""
    data_compression=""
    compression_algorithm=""
    message_format=""
}
print1() {
    with_key_derivation="${kd_algorithm}${kd_salt_bytes}${kd_iteration}${kd_prf}"
    with_compression="${compression_algorithm}"
    cat <<EOF
${service}:
    crypto:
        ${algorithm:+algorithm: ${algorithm}}
        ${key_length:+key_length: ${key_length}}
        ${mode:+mode: ${mode}}
        ${padding:+padding: ${padding}}
        ${with_key_derivation:+key_derivation:
            ${kd_algorithm:+algorithm: ${kd_algorithm}}
            ${kd_salt_bytes:+salt_bytes: ${kd_salt_bytes}}
            ${kd_iteration:+iteration: ${kd_iteration}}
            ${kd_prf:+prf: ${kd_prf}}}
        password:
            value: ${password}
    topic: test-topic
    value_type: byte_array
    type: dummy
    brokers: broker.example.com
    data_encryption: ${data_encryption:-true}
    ${data_compression:+data_compression: ${data_compression}}
    ${with_compression:+compression:
        ${compression_algorithm:+algorithm: ${compression_algorithm}}}
    ${message_format:+message_format: ${message_format}}

EOF
}
print_service() {
    service="${algorithm}+${key_length}+${mode}+${padding}+${kd_algorithm}+${kd_salt_bytes}+${kd_iteration}+${kd_prf}"
    service="${service}${data_encryption:++enc=${data_encryption}}"
    service="${service}${data_compression:++comp${compression_algorithm:+=${compression_algorithm}}}"
    service="${service}${message_format:++v${message_format}}"
    print1
}

validp() {
    # CBC requires padding.
    # GCM/EAX doesn't require padding.
    case "$mode-${padding:-none}" in
    CBC-none) return 1;;
    *-none) return 0;;
    GCM-*|EAX-*) return 1;;
    esac
    return 0
}

combine_crypto_params() {
    echo "# test crypto (key_derivation is default values)"
    for algorithm in AES; do
     for key_length in "" 128 192 256; do
      for mode in CBC OFB CTR GCM EAX; do
       for padding in "" none pkcs7; do
        if ! validp; then
          continue
        fi
        print_service
       done
      done
     done
    done

    echo "# test key_derivation"
    for algorithm in AES; do
     for key_length in ""; do
      for mode in CBC GCM; do
       for padding in "" pkcs7; do
        if ! validp; then
          continue
        fi
        for kd_algorithm in "" pbkdf2; do
         for kd_salt_bytes in "" 8 12 16; do
          for kd_iteration in "" 1 1000 10000; do
           for kd_prf in "" HMAC-SHA256; do
            print_service
           done
          done
         done
        done
       done
      done
     done
    done
} #end combine_crypto_params

combine_compression_params() {
    echo "# test compression,encryption,message_format"
    for message_format in 2 3; do
     for data_encryption in false true; do
      for data_compression in "" true; do
       for compression_algorithm in "" gzip zstd; do
        if [ "${data_compression}" = false -a "${compression_algorithm}" != "" ]; then
            continue
        fi
        case "${data_compression:-none}-${compression_algorithm:-none}" in
        none-none) ;;
        none-*) continue;;
        *-*) ;;
        esac
        print_service
       done
      done
     done
    done
}

topdir=$(git rev-parse --show-toplevel)
topname=$(basename "$topdir")
this=$(readlink -f "$0")
relpath="${topname}${this#"$topdir"}"
echo "# generated by ${relpath} at $(date '+%Y-%m-%d %H:%M:%S %z(%Z)')"
echo ""

reset; combine_crypto_params
reset; combine_compression_params

exit
