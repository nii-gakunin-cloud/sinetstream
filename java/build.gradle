/*
 * Copyright (C) 2020 National Institute of Informatics
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

wrapper {
    // To upgrade: rewrite the version and run "./gradlew wrapper"
    gradleVersion = '8.6'
}

allprojects {
    group = 'net.sinetstream'
    version currentVersion
    // currentVersion is defined in gradle.properties

    repositories {
        mavenCentral()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked"
            options.compilerArgs << "-g"
        }
    }
}

buildscript {
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    java {
        sourceCompatibility = JavaVersion.VERSION_11
    }
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    java {
        withJavadocJar()
        withSourcesJar()
    }

    test {
        useJUnitPlatform()
    }

    test.finalizedBy jacocoTestReport

    jacoco {
        toolVersion = "0.8.11"
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    }

    /*
    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier.set('sources')
    }
    */

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                afterEvaluate {
                    groupId = 'net.sinetstream'
                    artifactId = project.name
                    version = currentVersion
                }
                pom {
                    name = 'SINETStream'
                    description = 'The SINETStream is a messaging system that adopts a topic-based publish/subscribe model.'
                    url = 'https://www.sinetstream.net/'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            name = 'nii-gakunin-cloud'
                            email = 'sinetstream-support@nii.ac.jp'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/nii-gakunin-cloud/sinetstream.git'
                        //developerConnection = 'scm:git:https://github.com/nii-gakunin-cloud/sinetstream.git'
                        url = 'https://github.com/nii-gakunin-cloud/sinetstream'
                    }
                }
            }
        }
        repositories {
            maven { // begin-maven-spec
                //def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                //def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    // to publish: ossrhUsername and ossrhPassword must be defined in ~/.gradle/gradle.properties
                    username = project.hasProperty('ossrhUsername') ? "${ossrhUsername}" : System.getenv('OSSRH_USERNAME')
                    password = project.hasProperty('ossrhPassword') ? "${ossrhPassword}" : System.getenv('OSSRH_PASSWORD')
                }
            } // end-maven-spec
        }
    }

    signing {
        // to publish: signing.keyId, .password and .secretKeyRingFile must be defined in ~/.gradle/gradle.properties
        sign publishing.publications.mavenJava
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}
